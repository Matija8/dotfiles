// alDuncanson / react-hooks-snippets
// https://github.com/alDuncanson/react-hooks-snippets/blob/master/snippets/snippets.json

{
  // *** Hooks ***

  "react-useState": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "ush",
    // Use "tab" to go to next placeholder!
    // https://code.visualstudio.com/docs/editor/userdefinedsnippets#:~:text=jump%20to%20the%20next%20placeholder%20with%20Tab
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"],
    "description": "React useState() hook"
  },

  "react-useEffect": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "ueh",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [${3}]);$0"
    ],
    "description": "React useEffect() hook"
  },

  "react-useMemo": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "umh",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}]);$0"
    ],
    "description": "React useMemo() hook"
  },

  "react-useCallback": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": ["uch", "ucbh"],
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ");$0"
    ],
    "description": "React useCallback() hook"
  },

  "react-useRef": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "urh",
    "body": ["const $1 = useRef($2);$0"],
    "description": "React useRef() hook"
  },

  // *** JSX ***

  "Matija-h1-expression-html": {
    "scope": "html",
    "prefix": ["xh1"],
    "body": "<h1 style=\"outline:solid red; z-index: 999999;\">$*$ h1 $0 </h1>",
    "description": "An h1 tag for debugging component trees"
  },

  "Matija-jsx-h1-expression": {
    // The "javascript" scope is for admin pages.
    "scope": "javascript, javascriptreact, typescriptreact",
    "prefix": ["xh1"],
    "body": "<h1 style={{outline:'solid red', zIndex: 999999}}>$*$ h1 $0 </h1>",
    "description": "An h1 tag for debugging react component trees"
    // https://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/
    // style={{ outline: 'solid red', background: 'beige' }}
  },

  "Matija-jsx-h1-return": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": ["rh1"],
    "body": "return <h1 style={{outline:'solid red'}}>$*$ h1 $0 </h1>; //T*DO",
    "description": "Return of an h1 tag for debugging react component trees"
  },

  "Matija-jsx-pre-tag": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": ["pre1"],
    "body": [
      "<pre style={{ outline: 'solid red' }}>",
      "  {(() => {",
      "    try {",
      "      return '$*$ $1 \\n' + JSON.stringify({$0}, null, 2); // T*DO",
      "    } catch (_err) {",
      "      return 'ERROR: Failed to stringify';",
      "    }",
      "  })()}",
      "</pre>"
    ],
    "description": "Return of an h1 tag for debugging react component trees"
  },

  "react-button": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": ["btn1"],
    "body": ["<button onClick={() => {$0}}>debugClick</button>"],
    "description": "React button for debugging"
  },

  // *** Components ***
  "react-component": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": ["component1", "cmpnt1", "cmpn1", "cmp1"],
    "body": [
      "function Component1$1(props) {",
      "\t$0return (",
      "\t\t<div style={{ outline: 'solid red' }}>",
      "\t\t\t<h2>Component1$1</h2>",
      "\t\t</div>",
      "\t);",
      "}"
    ],
    "description": "React functional component"
  }
}
