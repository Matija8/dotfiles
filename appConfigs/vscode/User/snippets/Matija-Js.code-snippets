{
  // *** Shebang ***

  "node shebang": {
    "scope": "javascript",
    "prefix": "#!",
    "body": ["#!/usr/bin/env node\n"],
    "description": "node shebang"
  },

  "deno shebang": {
    // https://deno.land/manual@v1.26.0/examples/shebang
    "scope": "typescript",
    "prefix": ["#!", "#!deno"],
    "body": ["#!/usr/bin/env -S deno run --allow-env --allow-net\n"],
    "description": "deno shebang"
  },

  "ts-node shebang": {
    // https://github.com/TypeStrong/ts-node/issues/73
    "scope": "typescript",
    "prefix": "#!ts-node",
    "body": ["#!/usr/bin/env -S ts-node -T\n"],
    "description": "ts-node shebang"
  },

  // *** Log ***

  "Matija-log": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["lg", "log", "log1"],
    "body": ["console.log($1);$0"],
    "description": "Quick console.log"
  },

  "Matija-log-x1": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["lx1"],
    "body": ["console.log(`$*$ $1`,{$0 }); //T*DO"],
    "description": "Quick console.log for debugging"
  },

  "Matija-log-x2-eslint": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["lx2"],
    // https://stackoverflow.com/questions/41856706/whats-the-best-way-to-write-multi-line-code-snippets-in-vs-code
    "body": [
      "// eslint-disable-next-line no-console",
      "console.log(`$*$ $1`,{$0 }); //T*DO"
    ],
    "description": "Quick console.log that doesn't trigger eslint error"
  },

  "Matija-log-x3-winston": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["lx3"],
    "body": [
      "// eslint-disable-next-line no-console",
      "console.log(`VVVVV\\n\\n`,",
      "{ ts: new Date(), msg: `$*$ $1`,$0 }, //T*DO",
      "`\\n\\nΛΛΛΛΛ`);"
    ],
    "description": "Insert console.log() between noisy winston logs"
  },

  "Matija-cdir-1": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["cdir1", "logdeep"],
    // https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object
    "body": ["console.dir({ msg: `$*$ $1`, $0},{ depth: null }); //T*DO"],
    "description": "Insert console.dir() for deep objects, to avoid \"[Object]\" output"
  },

  "Matija-throw-error-test": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["throwerr"],
    "body": ["throw Error (`$*$ test error$1`,{ cause: {$0} }); //T*DO"],
    "description": "Quick error throw for testing error handling"
  },

  // *** Trace ***

  "Matija-trace-1": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["tr1"],
    "body": [
      "// eslint-disable-next-line no-console",
      "console.trace(`$*$ trace $1`,{$0 }); //T*DO"
    ],
    "description": "Quick console.trace(_) that doesn't trigger eslint error"
  },

  // *** Time ***

  "Matija-time-1": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["tm1", "time1"],
    "body": [
      "// eslint-disable-next-line no-console",
      "console.time('$*$ time $1'); //T*DO$0",
      "// eslint-disable-next-line no-console",
      "console.timeEnd('$*$ time $1'); //T*DO"
    ],
    "description": "Quick time command that doesn't trigger eslint error"
  },
  "Matija-time-2": {
    // https://stackoverflow.com/questions/313893/how-to-measure-time-taken-by-a-function-to-execute
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["tm2", "time2-perf"],
    "body": [
      "let startTime = performance.now();",
      "let endTime = performance.now();",
      "console.log(`Time $0 : ${endTime - startTime} milliseconds`);"
    ],
    "description": "Perf timing"
  },

  "Matija-wait-3sec": {
    // https://stackoverflow.com/questions/42529476/let-promise-wait-a-couple-of-seconds-before-return
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["wait3", "pause3"],
    "body": [
      "(new Promise((resolve) => setTimeout(() => {alert('3secs')$1; resolve(undefined);}, 3000)))"
    ],
    "description": "Simulate fetch (3seconds)"
  },

  // *** Debugger ***

  "Matija-debug-1": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["deb1"],
    "body": ["// eslint-disable-next-line no-debugger", "debugger; //T*DO$0"],
    "description": "Quick debugger command that doesn't trigger eslint error"
  },

  // *** Window ***

  "Matija-window-attach": {
    "scope": "javascript, javascriptreact",
    "prefix": ["wn1", "window1"],
    "body": "window._x1 = $0; //T*DO",
    "description": "Debug object methods with autocomplete via window"
  },

  "Matija-window-attach-ts": {
    "scope": "typescript, typescriptreact",
    "prefix": ["wn1", "window1"],
    "body": "(window as any)._x1 = $0; //T*DO",
    "description": "Debug object methods with autocomplete via window"
  },

  "Matija-window-debug-shift-t": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["wt1", "wt2"],
    "body": [
      "//T*DO",
      "window.addEventListener('keypress', async (ev) => {",
      "  if (!ev.shiftKey || ev.key.toLowerCase() !== 't') return;",
      "  try {",
      "    // eslint-disable-next-line no-console",
      "    console.log(`$*$ wt start`);",
      "    // eslint-disable-next-line no-debugger",
      "    // debugger;",
      "    //",
      "    //",
      "    $0",
      "    //",
      "    //",
      "    // eslint-disable-next-line no-console",
      "    console.log(`$*$ wt end`, {});",
      "  } catch (err) {",
      "    // eslint-disable-next-line no-console",
      "    console.error(`$*$ wt error`);",
      "    // eslint-disable-next-line no-console",
      "    console.error(err);",
      "  }",
      "});",
      "//T*DO"
    ],
    "description": "Trigger async callback on Shift+T."
  },

  // *** Ts errors ***

  "ts-expect-error": {
    "scope": "typescript, typescriptreact",
    "prefix": ["tsexpecterror", "// tsexpecterror"],
    "body": "// @ts-expect-error $0"
  },

  "ts-ignore": {
    "scope": "typescript, typescriptreact",
    "prefix": ["tsignore", "// tsignore"],
    "body": "// @ts-ignore"
  },

  // *** IIFEs ***
  "Matija-iife-1": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["iife1"],
    "body": ["(() => {$0})()"],
    "description": "IIFE (Immediately Invoked Function Expression)"
  },

  // *** Other ***

  "region": {
    // https://dev.to/hurricaneinteractive/vs-code-define-a-region-1cd1
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": ["//region", "//#region", "// #region", "#region"],
    "body": ["// #region$1", "// #endregion"],
    "description": "#Region comments for IDE code folding"
  }
}
